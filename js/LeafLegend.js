// Generated by CoffeeScript 1.7.1
(function() {
  var LeafLegend, addChainedAttributeAccessor,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  LeafLegend = (function() {
    function LeafLegend(color1, color2, steps) {
      this.properties = {
        color1: color1,
        color2: color2,
        steps: steps,
        xmin: 1,
        xmax: 10065,
        ymin: 0,
        ymax: 3000,
        xsize: 20,
        ysize: 20,
        cols1: [],
        colurschema1: [],
        colurschema2: [],
        colurschema3: [],
        colurschema4: []
      };
    }

    LeafLegend.prototype.color1 = function(newColor1) {
      this.properties.color1 = newColor1;
      return this;
    };

    LeafLegend.prototype.color2 = function(newColor2) {
      this.properties.color2 = newColor2;
      return this;
    };

    LeafLegend.prototype.steps = function(newSteps) {
      this.properties.steps = newSteps;
      return this;
    };

    LeafLegend.prototype.xmin = function(newXmin) {
      this.properties.xmin = newXmin;
      return this;
    };

    LeafLegend.prototype.ymin = function(newYmin) {
      this.properties.ymin = newYmin;
      return this;
    };

    LeafLegend.prototype.xmax = function(newXmax) {
      this.properties.xmax = newXmax;
      return this;
    };

    LeafLegend.prototype.ymax = function(newYmax) {
      this.properties.ymax = newYmax;
      return this;
    };

    LeafLegend.prototype.xsize = function(newXsize) {
      this.properties.xsize = newXsize;
      return this;
    };

    LeafLegend.prototype.ysize = function(newYsize) {
      this.properties.ysize = newYsize;
      return this;
    };

    LeafLegend.prototype.cols1 = function(newCols1) {
      this.properties.cols1 = newCols1;
      return this;
    };

    LeafLegend.prototype.colurschema1 = function(newColurschema1) {
      this.properties.colurschema1 = newColurschema1;
      return this;
    };

    LeafLegend.prototype.colurschema2 = function(newColurschema2) {
      this.properties.colurschema2 = newColurschema2;
      return this;
    };

    LeafLegend.prototype.colurschema3 = function(newColurschema3) {
      this.properties.colurschema3 = newColurschema3;
      return this;
    };

    LeafLegend.prototype.colurschema4 = function(newColurschema4) {
      this.properties.colurschema4 = newColurschema4;
      return this;
    };

    LeafLegend.prototype.makeGrid = function() {
      var $palettes, cl1, cl2, color1, color2, cols1, colurs, colurschema1, colurschema2, colurschema3, colurschema4, colurseq, colursstatements, grid_size, grid_size_effective, i, icreament_size, m, n, pallets, steps, x, x_size, xintervals, y_size, yintervals, _i, _j, _k, _l, _len, _m, _n, _o, _p, _q, _r, _ref, _s, _t, _u;
      color1 = this.properties.color1;
      color2 = this.properties.color2;
      steps = this.properties.steps;
      grid_size_effective = steps;
      grid_size = grid_size_effective;
      x_size = this.properties.xsize;
      y_size = this.properties.ysize;
      icreament_size = 1 / grid_size;
      $palettes = [];
      for (i = _i = 1, _ref = grid_size + 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        $palettes.push("$#palette" + ("" + i));
      }
      pallets = [];
      for (i = _j = 0; 0 <= grid_size ? _j <= grid_size : _j >= grid_size; i = 0 <= grid_size ? ++_j : --_j) {
        pallets.push('=$("#pallet' + ("" + i) + '")');
      }
      for (n = _k = 0; 0 <= grid_size ? _k <= grid_size : _k >= grid_size; n = 0 <= grid_size ? ++_k : --_k) {
        pallets[n] = $palettes[n + 1];
      }
      colurschema1 = [];
      colurschema2 = [];
      colurschema3 = [];
      colurschema4 = [];
      for (x = _l = 0; _l <= 1; x = _l += icreament_size) {
        colurschema1.push(chroma.interpolate(color1, "black", x, "lab").hex());
      }
      for (x = _m = 0; _m <= 1; x = _m += icreament_size) {
        colurschema2.push(chroma.interpolate("black", color2, x, "lab").hex());
      }
      for (x = _n = 0; _n <= 1; x = _n += icreament_size) {
        colurschema3.push(chroma.interpolate(color1, "white", x, "lab").hex());
      }
      for (x = _o = 0; _o <= 1; x = _o += icreament_size) {
        colurschema4.push(chroma.interpolate("white", color2, x, "lab").hex());
      }
      colurs = [];
      cols1 = [];
      colursstatements = [];
      for (i = _p = 1; 1 <= grid_size ? _p <= grid_size : _p >= grid_size; i = 1 <= grid_size ? ++_p : --_p) {
        colurs.push("colurs" + i);
      }
      colurs[i];
      colurseq = colurs[i] = [];
      for (x = _q = 0; 0 <= grid_size ? _q <= grid_size : _q >= grid_size; x = 0 <= grid_size ? ++_q : --_q) {
        cl1 = colurschema3[x];
        cl2 = colurschema2[x];
        for (m = _r = 0; _r <= 1; m = _r += icreament_size) {
          cols1.push(chroma.interpolate(cl1, cl2, m, "lab"));
        }
        for (_s = 0, _len = colurschema4.length; _s < _len; _s++) {
          m = colurschema4[_s];
          cols1.push(m);
        }
      }
      this.xintervalSize = this.properties.xmax / x_size;
      xintervals = [];
      for (i = _t = 1; 1 <= x_size ? _t <= x_size : _t >= x_size; i = 1 <= x_size ? ++_t : --_t) {
        xintervals.push(this.properties.xmin + (i * this.xintervalSize));
      }
      this.yintervalSize = this.properties.ymax / this.properties.ysize;
      yintervals = [];
      for (i = _u = 1; 1 <= y_size ? _u <= y_size : _u >= y_size; i = 1 <= y_size ? ++_u : --_u) {
        yintervals.push(this.properties.ymin + (i * this.yintervalSize));
      }
      this.xintervals = xintervals;
      this.yintervals = yintervals;
      this.colurschema1(colurschema1);
      this.colurschema2(colurschema2);
      this.colurschema3(colurschema3);
      this.colurschema4(colurschema4);
      this.cols1(cols1);
      return this;
    };

    LeafLegend.prototype.getColorByRangeAndSize = function(x_val, y_val) {
      var ix_intervals, iy_intervals;
      ix_intervals = Math.ceil(x_val / this.xintervalSize);
      iy_intervals = Math.ceil(y_val / this.yintervalSize);
      this.cellColorIndex = (iy_intervals * x_size) + ix_intervals;
      this.cellColor = this.cols1[this.cellColorIndex];
      return this.cellColor;
    };

    return LeafLegend;

  })();

  window.Leaflegend = (function(_super) {
    __extends(Leaflegend, _super);

    function Leaflegend() {
      return Leaflegend.__super__.constructor.apply(this, arguments);
    }

    return Leaflegend;

  })(LeafLegend);

  addChainedAttributeAccessor = function(obj, propertyAttr, attr) {
    return obj[attr] = function() {
      var newValues;
      newValues = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (newValues.length === 0) {
        return obj[propertyAttr][attr];
      } else {
        obj[propertyAttr][attr] = newValues[0];
        return obj;
      }
    };
  };

}).call(this);
