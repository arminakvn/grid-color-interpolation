// Generated by CoffeeScript 1.7.1
(function() {
  var $palette, $palette10, $palette11, $palette12, $palette13, $palette14, $palette15, $palette16, $palette17, $palette18, $palette19, $palette2, $palette20, $palette3, $palette4, $palette5, $palette6, $palette7, $palette8, $palette9, color1, color2, colurs1, colurs10, colurs11, colurs12, colurs13, colurs14, colurs15, colurs16, colurs17, colurs18, colurs19, colurs2, colurs20, colurs3, colurs4, colurs5, colurs6, colurs7, colurs8, colurs9, colurschema1, colurschema2, colurschema3, colurschema4, each, grid_size, icreament_size, x, _aa, _ab, _ac, _ad, _ae, _af, _ag, _ah, _ai, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;

  color1 = chroma(68.67, -13.07, -46.59, 'lab');

  color2 = chroma(76.84, 20.60, 51.06, 'lab');

  grid_size = 12;

  icreament_size = 1 / grid_size;

  $palette = $("#pallet1");

  $palette2 = $("#pallet2");

  $palette3 = $("#pallet3");

  $palette4 = $("#pallet4");

  $palette5 = $("#pallet5");

  $palette6 = $("#pallet6");

  $palette7 = $("#pallet7");

  $palette8 = $("#pallet8");

  $palette9 = $("#pallet9");

  $palette10 = $("#pallet10");

  $palette11 = $("#pallet11");

  $palette12 = $("#pallet12");

  $palette13 = $("#pallet13");

  $palette14 = $("#pallet14");

  $palette15 = $("#pallet15");

  $palette16 = $("#pallet16");

  $palette17 = $("#pallet17");

  $palette18 = $("#pallet18");

  $palette19 = $("#pallet19");

  $palette20 = $("#pallet20");

  colurschema1 = [];

  colurschema2 = [];

  colurschema3 = [];

  colurschema4 = [];

  for (x = _i = 0; _i <= 1; x = _i += icreament_size) {
    colurschema1.push(chroma.interpolate(color1, "black", x, "lch").hex());
  }

  for (x = _j = 0; _j <= 1; x = _j += icreament_size) {
    colurschema2.push(chroma.interpolate("black", color2, x, "lch").hex());
  }

  for (x = _k = 0; _k <= 1; x = _k += icreament_size) {
    colurschema3.push(chroma.interpolate(color1, "white", x, "lch").hex());
  }

  for (x = _l = 0; _l <= 1; x = _l += icreament_size) {
    colurschema4.push(chroma.interpolate("white", color2, x, "lch").hex());
  }

  colurs1 = colurschema1;

  colurs2 = [];

  colurs3 = [];

  colurs4 = [];

  colurs5 = [];

  colurs6 = [];

  colurs7 = [];

  colurs8 = [];

  colurs9 = [];

  colurs10 = [];

  colurs11 = [];

  colurs12 = [];

  colurs13 = [];

  colurs14 = [];

  colurs15 = [];

  colurs16 = [];

  colurs17 = [];

  colurs18 = [];

  colurs19 = [];

  colurs20 = [];

  for (x = _m = 0; _m <= 1; x = _m += icreament_size) {
    colurs2.push(chroma.interpolate(colurschema3[1], colurschema2[1], x, "lch").hex());
  }

  for (x = _n = 0; _n <= 1; x = _n += icreament_size) {
    colurs3.push(chroma.interpolate(colurschema3[2], colurschema2[2], x, "lch").hex());
  }

  for (x = _o = 0; _o <= 1; x = _o += icreament_size) {
    colurs4.push(chroma.interpolate(colurschema3[3], colurschema2[3], x, "lch").hex());
  }

  for (x = _p = 0; _p <= 1; x = _p += icreament_size) {
    colurs5.push(chroma.interpolate(colurschema3[4], colurschema2[4], x, "lch").hex());
  }

  for (x = _q = 0; _q <= 1; x = _q += icreament_size) {
    colurs6.push(chroma.interpolate(colurschema3[5], colurschema2[5], x, "lch").hex());
  }

  for (x = _r = 0; _r <= 1; x = _r += icreament_size) {
    colurs7.push(chroma.interpolate(colurschema3[6], colurschema2[6], x, "lch").hex());
  }

  for (x = _s = 0; _s <= 1; x = _s += icreament_size) {
    colurs8.push(chroma.interpolate(colurschema3[7], colurschema2[7], x, "lch").hex());
  }

  for (x = _t = 0; _t <= 1; x = _t += icreament_size) {
    colurs9.push(chroma.interpolate(colurschema3[8], colurschema2[8], x, "lch").hex());
  }

  for (x = _u = 0; _u <= 1; x = _u += icreament_size) {
    colurs10.push(chroma.interpolate(colurschema3[9], colurschema2[9], x, "lch").hex());
  }

  for (x = _v = 0; _v <= 1; x = _v += icreament_size) {
    colurs11.push(chroma.interpolate(colurschema3[10], colurschema2[10], x, "lch").hex());
  }

  for (x = _w = 0; _w <= 1; x = _w += icreament_size) {
    colurs12.push(chroma.interpolate(colurschema3[11], colurschema2[11], x, "lch").hex());
  }

  for (each = _x = 0; 0 <= grid_size ? _x <= grid_size : _x >= grid_size; each = 0 <= grid_size ? ++_x : --_x) {
    $palette.append($("<li />").css("background-color", colurs1[each]));
  }

  for (each = _y = 0; 0 <= grid_size ? _y <= grid_size : _y >= grid_size; each = 0 <= grid_size ? ++_y : --_y) {
    $palette2.append($("<li />").css("background-color", colurs2[each]));
  }

  for (each = _z = 0; 0 <= grid_size ? _z <= grid_size : _z >= grid_size; each = 0 <= grid_size ? ++_z : --_z) {
    $palette3.append($("<li />").css("background-color", colurs3[each]));
  }

  for (each = _aa = 0; 0 <= grid_size ? _aa <= grid_size : _aa >= grid_size; each = 0 <= grid_size ? ++_aa : --_aa) {
    $palette4.append($("<li />").css("background-color", colurs4[each]));
  }

  for (each = _ab = 0; 0 <= grid_size ? _ab <= grid_size : _ab >= grid_size; each = 0 <= grid_size ? ++_ab : --_ab) {
    $palette5.append($("<li />").css("background-color", colurs5[each]));
  }

  for (each = _ac = 0; 0 <= grid_size ? _ac <= grid_size : _ac >= grid_size; each = 0 <= grid_size ? ++_ac : --_ac) {
    $palette6.append($("<li />").css("background-color", colurs6[each]));
  }

  for (each = _ad = 0; 0 <= grid_size ? _ad <= grid_size : _ad >= grid_size; each = 0 <= grid_size ? ++_ad : --_ad) {
    $palette7.append($("<li />").css("background-color", colurs7[each]));
  }

  for (each = _ae = 0; 0 <= grid_size ? _ae <= grid_size : _ae >= grid_size; each = 0 <= grid_size ? ++_ae : --_ae) {
    $palette8.append($("<li />").css("background-color", colurs8[each]));
  }

  for (each = _af = 0; 0 <= grid_size ? _af <= grid_size : _af >= grid_size; each = 0 <= grid_size ? ++_af : --_af) {
    $palette9.append($("<li />").css("background-color", colurs9[each]));
  }

  for (each = _ag = 0; 0 <= grid_size ? _ag <= grid_size : _ag >= grid_size; each = 0 <= grid_size ? ++_ag : --_ag) {
    $palette10.append($("<li />").css("background-color", colurs10[each]));
  }

  for (each = _ah = 0; 0 <= grid_size ? _ah <= grid_size : _ah >= grid_size; each = 0 <= grid_size ? ++_ah : --_ah) {
    $palette11.append($("<li />").css("background-color", colurs11[each]));
  }

  for (each = _ai = 0; 0 <= grid_size ? _ai <= grid_size : _ai >= grid_size; each = 0 <= grid_size ? ++_ai : --_ai) {
    $palette12.append($("<li />").css("background-color", colurs12[each]));
  }

}).call(this);
